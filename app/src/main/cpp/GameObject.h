/******************************************************************************/
/*! @file       GameObject.h
    @brief      ゲームオブジェクト基底クラス定義ファイル
*******************************************************************************/

#ifndef GAMEOBJECT_H
#define GAMEOBJECT_H

#include "GameDefine.h"
#include <memory>
#include <vector>
#include <list>

namespace Shooting2D
{
    /******************************************************************************/
    /*! @class CGameObject
        @brief  ゲームオブジェクト基底クラス
    *******************************************************************************/
    class CGameObject
    {
    protected:

        /*! 表示フラグ */
        MyBool  m_bShow;
        /*! 座標X */
        MyFloat m_PosX;
        /*! 座標Y */
        MyFloat m_PosY;
        /*! 横幅 */
        MyS32   m_Width;
        /*! 高さ */
        MyS32   m_Height;
        /*! 判定の半径 */
        MyFloat m_Radius;

    public:

        /******************************************************************************/
        /*! コンストラクタ
        *******************************************************************************/
        CGameObject();

        /******************************************************************************/
        /*! デストラクタ
        *******************************************************************************/
        virtual ~CGameObject();

        /******************************************************************************/
        /*! ゲームオブジェクトの更新
            @return         成功 k_Success, 失敗 それ以外
        *******************************************************************************/
        virtual MyS32 Update();

        /******************************************************************************/
        /*! ゲームオブジェクトの描画
            @return         成功 k_Success, 失敗 それ以外
        *******************************************************************************/
        virtual MyS32 Draw();

        /******************************************************************************/
        /*! 座標Xの取得
            @return         座標X
        *******************************************************************************/
        MyFloat GetPosX() const noexcept
        {
            return m_PosX;
        }

        /******************************************************************************/
        /*! 座標Yの取得
            @return         座標Y
        *******************************************************************************/
        MyFloat GetPosY() const noexcept
        {
            return m_PosY;
        }

        /******************************************************************************/
        /*! 横幅の取得
            @return         横幅
        *******************************************************************************/
        MyS32 GetWidth() const noexcept
        {
            return m_Width;
        }

        /******************************************************************************/
        /*! 高さの取得
            @return         高さ
        *******************************************************************************/
        MyS32 GetHeight() const noexcept
        {
            return m_Height;
        }

        /******************************************************************************/
        /*! 判定の半径の取得
            @return         判定の半径
        *******************************************************************************/
        MyFloat GetRadius() const noexcept
        {
            return m_Radius;
        }

        /******************************************************************************/
        /*! 表示フラグの取得
            @return         表示フラグ
        *******************************************************************************/
        MyBool IsShow() const noexcept
        {
            return m_bShow;
        }

        /******************************************************************************/
        /*! 表示フラグの設定
            @param[in]      value    設定する値
        *******************************************************************************/
        MyVoid SetShow(RKMy(MyBool) value)
        {
            m_bShow = value;
        }
    };

    /*! ポインタ置き換え */
    using GameObjectPtr   = std::shared_ptr<CGameObject>;
    using GameObjectArray = std::vector<GameObjectPtr>;
    using GameObjectList  = std::list<GameObjectPtr>;

}

#endif //GAMEOBJECT_H
