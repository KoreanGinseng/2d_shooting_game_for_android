/******************************************************************************/
/*! @file       TurretDecorator.h
    @brief      タレットデコレータクラス定義ファイル
*******************************************************************************/

#ifndef TURRETDECORATOR_H
#define TURRETDECORATOR_H

#include "Turret.h"

namespace Shooting2D
{

    /******************************************************************************/
    /*! @class CTurretDecorator
        @brief  タレットデコレータクラス
    *******************************************************************************/
    class CTurretDecorator : public ITurret
    {
    protected:

        /*! 砲台を用意 */
        TurretPtr m_Turret;

    public:

        /******************************************************************************/
        /*! コンストラクタ
        *******************************************************************************/
        CTurretDecorator()
            : m_Turret()
        {
        }

        /******************************************************************************/
        /*! デストラクタ
        *******************************************************************************/
        virtual ~CTurretDecorator() override
        {
        }

        /******************************************************************************/
        /*! 新規発射クラスの設定
        *******************************************************************************/
        template < typename T, typename... Types >
        std::shared_ptr<T> SetTurret(Types&&... _Args)
        {
            auto result = std::make_shared<T>(_Args...);
            SetTurret(result);
            return result;
        }

        /******************************************************************************/
        /*! 新規発射クラスの設定
            @param[in]      obj    設定するタレットポインタ
        *******************************************************************************/
        virtual MyVoid SetTurret(TurretPtr obj)
        {
            m_Turret = obj;
        }

        /******************************************************************************/
        /*! 初期化
            @return         成功 k_Success, 失敗 それ以外
        *******************************************************************************/
        virtual MyS32 Initialize() override
        {
            return m_Turret->Initialize();
        }

        /******************************************************************************/
        /*! 初期化
            @param[in]      px    対象の座標X
            @param[in]      py    対象の座標Y
            @return         成功 k_Success, 失敗 それ以外
        *******************************************************************************/
        virtual MyS32 Update(MyFloat px, MyFloat py) override
        {
            return m_Turret->Update(px, py);
        }

        /******************************************************************************/
        /*! オフセット位置Xの取得
            @return         オフセット位置X
        *******************************************************************************/
        MyFloat GetOffsetX() const noexcept override
        {
            return m_Turret->GetOffsetX();
        }

        /******************************************************************************/
        /*! オフセット位置Yの取得
            @return         オフセット位置Y
        *******************************************************************************/
        MyFloat GetOffsetY() const noexcept override
        {
            return m_Turret->GetOffsetY();
        }

        /******************************************************************************/
        /*! スピードXの取得
            @return         スピードX
        *******************************************************************************/
        MyFloat GetSpeedX() const noexcept override
        {
            return m_Turret->GetSpeedX();
        }

        /******************************************************************************/
        /*! スピードYの取得
            @return         スピードY
        *******************************************************************************/
        MyFloat GetSpeedY() const noexcept override
        {
            return m_Turret->GetSpeedY();
        }

        /******************************************************************************/
        /*! オフセット位置の設定
        　   @param[in]      sx    オフセット位置X
        　   @param[in]      sy    オフセット位置Y
        *******************************************************************************/
        MyVoid SetOffset(MyFloat sx, MyFloat sy) override
        {
            m_Turret->SetOffset(sx, sy);
        }

        /******************************************************************************/
        /*! スピードの設定
        　   @param[in]      sx    スピードX
        　   @param[in]      sy    スピードY
        *******************************************************************************/
        MyVoid SetSpeed(MyFloat sx, MyFloat sy) override
        {
            m_Turret->SetSpeed(sx, sy);
        }

        /******************************************************************************/
        /*! このフレームでの発射判定
            @return         このフレームでの発射判定
        *******************************************************************************/
        MyBool IsFire() const noexcept override
        {
            return m_Turret->IsFire();
        }
    };
}

#endif //TURRETDECORATOR_H
