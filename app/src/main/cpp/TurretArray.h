/******************************************************************************/
/*! @file       TurretArray.h
    @brief      タレット配列管理処理クラス定義ファイル
*******************************************************************************/

#ifndef TURRETARRAY_H
#define TURRETARRAY_H

#include "TurretSimple.h"

namespace Shooting2D
{

/******************************************************************************/
/*! @class CTurretArray
    @brief  弾発射配列管理処理クラス
*******************************************************************************/
    class CTurretArray : public ITurret
    {
    protected:
        /*! 砲台を配列で用意 */
        TurretArray m_TurretArray;

    public:

        /******************************************************************************/
        /*! コンストラクタ
        *******************************************************************************/
        CTurretArray();

        /******************************************************************************/
        /*! デストラクタ
        *******************************************************************************/
        virtual ~CTurretArray() override;

        /******************************************************************************/
        /*! 新規発射クラスの追加
            @return         ポインタ
        *******************************************************************************/
        template < typename T, typename... Types >
        std::shared_ptr<T> AddTurret(Types&&... _Args)
        {
            auto result = std::make_shared<T>(_Args...);
            AddTurret(result);
            return result;
        }

        /******************************************************************************/
        /*! 新規発射クラスの追加
        *******************************************************************************/
        virtual MyVoid AddTurret(TurretPtr obj)
        {
            m_TurretArray.push_back(obj);
        }

        /******************************************************************************/
        /*! 初期化
            @return         成功 k_Success, 失敗 それ以外
        *******************************************************************************/
        MyS32 Initialize() override;

        /******************************************************************************/
        /*! 更新
            @param[in]      px    対象の座標X
            @param[in]      py    対象の座標Y
            @return         成功 k_Success, 失敗 それ以外
        *******************************************************************************/
        MyS32 Update(MyFloat px, MyFloat py) override;

        /******************************************************************************/
        /*! オフセット位置Xの取得
            @return         オフセット位置X
        *******************************************************************************/
        MyFloat GetOffsetX() const noexcept override
        {
            return m_TurretArray[0]->GetOffsetX();
        }

        /******************************************************************************/
        /*! オフセット位置Yの取得
            @return         オフセット位置Y
        *******************************************************************************/
        MyFloat GetOffsetY() const noexcept override
        {
            return m_TurretArray[0]->GetOffsetY();
        }

        /******************************************************************************/
        /*! スピードXの取得
            @return         スピードX
        *******************************************************************************/
        MyFloat GetSpeedX() const noexcept override
        {
            return m_TurretArray[0]->GetSpeedX();
        }

        /******************************************************************************/
        /*! スピードYの取得
            @return         スピードY
        *******************************************************************************/
        MyFloat GetSpeedY() const noexcept override
        {
            return m_TurretArray[0]->GetSpeedY();
        }

        /******************************************************************************/
        /*! オフセット位置の設定
            @param[in]      sx    設定するオフセット位置Ｘ
            @param[in]      sy    設定するオフセット位置Ｙ
        *******************************************************************************/
        MyVoid SetOffset(MyFloat sx, MyFloat sy) override;

        /******************************************************************************/
        /*! スピードの設定
            @param[in]      sx    設定するスピードＸ
            @param[in]      sy    設定するスピードＹ
        *******************************************************************************/
        MyVoid SetSpeed(MyFloat sx, MyFloat sy) override;

        /******************************************************************************/
        /*! このフレームでの発射判定
            @return         発射フラグ
        *******************************************************************************/
        MyBool IsFire() const noexcept override
        {
            return m_TurretArray[0]->IsFire();
        }
    };
}

#endif //TURRETARRAY_H
