/******************************************************************************/
/*! @file       Singleton.h
    @brief      シングルトンクラス定義ファイル
*******************************************************************************/

#ifndef SINGLETON_H
#define SINGLETON_H

#include "Common.h"
#include <cassert>

namespace Shooting2D
{

    /******************************************************************************/
    /*! @class CSingleton
        @brief  シングルトンクラス
    *******************************************************************************/
    template < typename T >
    class CSingleton
    {
    private:
        /*! コピー、ムーブコンストラクタの削除 */
        CSingleton(RKMy(CSingleton)) = delete;
        CSingleton(CSingleton&&) = delete;

        /*! インスタンス */
        static T* m_Instance;

    protected:

        /******************************************************************************/
        /*! コンストラクタ
        *******************************************************************************/
        CSingleton() {}

        /******************************************************************************/
        /*! デストラクタ
        *******************************************************************************/
        virtual ~CSingleton() {}

        /******************************************************************************/
        /*! シングルトン用のインスタンスの生成
        *******************************************************************************/
        static MyVoid Create()
        {
            assert(!m_Instance);
            if (m_Instance)
            {
                return;
            }
            m_Instance = new T();
        }

    public:

        /******************************************************************************/
        /*! シングルトン用のアクセスポイント定義
         *  この関数内でインスタンス化され、外部から参照できる
            @return         インスタンス
        *******************************************************************************/
        static constexpr T& GetInstance()
        {
            if (m_Instance == nullptr)
            {
                Create();
            }
            return *m_Instance;
        }

        /******************************************************************************/
        /*! シングルトン用のインスタンス破棄
        *******************************************************************************/
        static MyVoid Release()
        {
            assert(m_Instance);
            if (m_Instance)
            {
                delete m_Instance;
                m_Instance = nullptr;
                return;
            }
        }
    };

    /*! インスタンスの初期化 */
    template < typename T >
    T* CSingleton<T>::m_Instance = nullptr;
}

#endif //SINGLETON_H
